USING THE SEQUENTIAL VERSION OF THE LCS ALGORITHM

The sequential Longest Common Subsequence (LCS) algorithm implemented in this project is the dynamic table algorithm.

== Test Data ==
In order to run this program, we need two test data sets. A resonable data set to use is 64KB in size and can be prepared easily by the following two commands:

dd if=/dev/urandom of=test1a bs=64k count=1
dd if=/dev/urandom of=test1b bs=64k count=1

== Run The Test ==
One a pair of similarly sized, random data sets are generated, you can run the LCS algorithm:

java DynamicSeq test1a test1b

Java runtime option 'mx256M' allows you to tune the memory upperbound used by the Java VM. You may need this if you generate a large enough dataset.

One invoked, the program will produce two result after a few minutes.
Printed to the screen will be:
* The discovered LCS length
* The first matching LCS string (the compared strings may have more than one LCS common to them).
